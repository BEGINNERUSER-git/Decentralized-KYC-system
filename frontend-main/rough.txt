<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DeKYC - Complete React Frontend Project</title>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: {
                            50: '#f0f9ff',
                            100: '#e0f2fe',
                            200: '#bae6fd',
                            300: '#7dd3fc',
                            400: '#38bdf8',
                            500: '#0ea5e9',
                            600: '#0284c7',
                            700: '#0369a1',
                            800: '#075985',
                            900: '#0c4a6e'
                        },
                        secondary: {
                            50: '#faf5ff',
                            100: '#f3e8ff',
                            200: '#e9d5ff',
                            300: '#d8b4fe',
                            400: '#c084fc',
                            500: '#a855f7',
                            600: '#9333ea',
                            700: '#7c3aed',
                            800: '#6b21a8',
                            900: '#581c87'
                        }
                    }
                }
            }
        }
    </script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; }
        .code-block {
            background: #1e293b;
            color: #e2e8f0;
            border-radius: 8px;
            padding: 1rem;
            margin: 1rem 0;
            overflow-x: auto;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 0.875rem;
            line-height: 1.5;
        }
        .file-header {
            background: #334155;
            color: #cbd5e1;
            padding: 0.5rem 1rem;
            border-radius: 8px 8px 0 0;
            font-weight: 600;
            font-size: 0.875rem;
            margin-bottom: 0;
        }
        .file-content {
            margin-top: 0;
            border-radius: 0 0 8px 8px;
        }
        .folder-structure {
            background: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 1.5rem;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 0.875rem;
            line-height: 1.6;
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState } = React;

        // Components
        const NavigationSidebar = ({ userRole }) => (
            <div className="w-64 bg-white shadow-lg h-full">
                <div className="p-6">
                    <div className="flex items-center space-x-3 mb-8">
                        <div className="w-10 h-10 bg-gradient-to-r from-primary-600 to-secondary-600 rounded-xl flex items-center justify-center">
                            <svg className="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                            </svg>
                        </div>
                        <div>
                            <h2 className="text-xl font-bold text-gray-900">DeKYC</h2>
                            <p className="text-sm text-gray-500 capitalize">{userRole}</p>
                        </div>
                    </div>
                    
                    <nav className="space-y-2">
                        <a href="#" className="flex items-center space-x-3 px-4 py-3 text-gray-700 rounded-lg hover:bg-gray-100">
                            <span>üìä</span>
                            <span>Dashboard</span>
                        </a>
                        {userRole === 'user' && (
                            <>
                                <a href="#" className="flex items-center space-x-3 px-4 py-3 text-gray-700 rounded-lg hover:bg-gray-100">
                                    <span>üìÑ</span>
                                    <span>My Documents</span>
                                </a>
                                <a href="#" className="flex items-center space-x-3 px-4 py-3 text-gray-700 rounded-lg hover:bg-gray-100">
                                    <span>üîç</span>
                                    <span>Verification Status</span>
                                </a>
                            </>
                        )}
                        {userRole === 'issuer' && (
                            <>
                                <a href="#" className="flex items-center space-x-3 px-4 py-3 text-gray-700 rounded-lg hover:bg-gray-100">
                                    <span>üìã</span>
                                    <span>Pending Requests</span>
                                </a>
                                <a href="#" className="flex items-center space-x-3 px-4 py-3 text-gray-700 rounded-lg hover:bg-gray-100">
                                    <span>‚úÖ</span>
                                    <span>Approved</span>
                                </a>
                            </>
                        )}
                        <a href="#" className="flex items-center space-x-3 px-4 py-3 text-gray-700 rounded-lg hover:bg-gray-100">
                            <span>‚öôÔ∏è</span>
                            <span>Settings</span>
                        </a>
                    </nav>
                </div>
            </div>
        );

        const TopHeader = ({ onLogout, userRole }) => (
            <header className="bg-white border-b border-gray-200 px-6 py-4">
                <div className="flex items-center justify-between">
                    <h1 className="text-2xl font-semibold text-gray-900">
                        {userRole === 'user' && 'User Dashboard'}
                        {userRole === 'issuer' && 'Issuer Dashboard'}
                        {userRole === 'verifier' && 'Verifier Dashboard'}
                        {userRole === 'admin' && 'Admin Dashboard'}
                    </h1>
                    <div className="flex items-center space-x-4">
                        <button className="p-2 text-gray-400 hover:text-gray-600">
                            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 17h5l-5 5-5-5h5v-12"/>
                            </svg>
                        </button>
                        <button 
                            onClick={onLogout}
                            className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200"
                        >
                            Logout
                        </button>
                    </div>
                </div>
            </header>
        );

        const StatusCard = ({ title, status, description, icon, count }) => (
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                <div className="flex items-center justify-between">
                    <div>
                        <p className="text-sm font-medium text-gray-600">{title}</p>
                        <p className="text-2xl font-bold text-gray-900 mt-1">
                            {count !== undefined ? count : status}
                        </p>
                        <p className="text-sm text-gray-500 mt-1">{description}</p>
                    </div>
                    <div className="text-3xl">{icon}</div>
                </div>
                {status && (
                    <div className="mt-4">
                        <span className={`px-2 py-1 text-xs font-medium rounded-full ${
                            status === 'approved' ? 'bg-green-100 text-green-800' :
                            status === 'rejected' ? 'bg-red-100 text-red-800' :
                            status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                            'bg-gray-100 text-gray-800'
                        }`}>
                            {status}
                        </span>
                    </div>
                )}
            </div>
        );

        const FileUploadZone = ({ onFileUpload, acceptedTypes, maxSize }) => {
            const [dragOver, setDragOver] = useState(false);

            const handleDrop = (e) => {
                e.preventDefault();
                setDragOver(false);
                const files = Array.from(e.dataTransfer.files);
                onFileUpload(files);
            };

            return (
                <div 
                    className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${
                        dragOver ? 'border-primary-400 bg-primary-50' : 'border-gray-300'
                    }`}
                    onDragOver={(e) => { e.preventDefault(); setDragOver(true); }}
                    onDragLeave={() => setDragOver(false)}
                    onDrop={handleDrop}
                >
                    <div className="w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center mx-auto mb-4">
                        <svg className="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"/>
                        </svg>
                    </div>
                    <p className="text-lg font-medium text-gray-900 mb-2">Drop files here or click to upload</p>
                    <p className="text-sm text-gray-500">
                        Supported formats: JPG, PNG, PDF (max {maxSize}MB)
                    </p>
                    <input type="file" className="hidden" multiple accept={acceptedTypes?.join(',')} />
                </div>
            );
        };

        const ActionButton = ({ children, variant = 'primary', size = 'medium', loading, fullWidth, ...props }) => {
            const baseClasses = 'font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2';
            const variantClasses = {
                primary: 'bg-primary-600 hover:bg-primary-700 text-white focus:ring-primary-500',
                secondary: 'bg-gray-100 hover:bg-gray-200 text-gray-900 focus:ring-gray-500',
                success: 'bg-green-600 hover:bg-green-700 text-white focus:ring-green-500',
                danger: 'bg-red-600 hover:bg-red-700 text-white focus:ring-red-500'
            };
            const sizeClasses = {
                small: 'px-3 py-1.5 text-sm',
                medium: 'px-4 py-2 text-sm',
                large: 'px-6 py-3 text-base'
            };

            return (
                <button 
                    className={`${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${fullWidth ? 'w-full' : ''} ${loading ? 'opacity-50 cursor-not-allowed' : ''}`}
                    disabled={loading}
                    {...props}
                >
                    {loading ? 'Loading...' : children}
                </button>
            );
        };

        const InfoModal = ({ isOpen, onClose, title, children }) => {
            if (!isOpen) return null;

            return (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
                    <div className="bg-white rounded-xl max-w-md w-full p-6">
                        <div className="flex items-center justify-between mb-4">
                            <h3 className="text-lg font-semibold text-gray-900">{title}</h3>
                            <button 
                                onClick={onClose}
                                className="text-gray-400 hover:text-gray-600"
                            >
                                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"/>
                                </svg>
                            </button>
                        </div>
                        {children}
                    </div>
                </div>
            );
        };

        const DataTable = ({ data, columns, emptyMessage }) => (
            <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                        <tr>
                            {columns.map((column) => (
                                <th key={column.key} className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    {column.label}
                                </th>
                            ))}
                        </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                        {data.length === 0 ? (
                            <tr>
                                <td colSpan={columns.length} className="px-6 py-12 text-center text-gray-500">
                                    {emptyMessage}
                                </td>
                            </tr>
                        ) : (
                            data.map((row, index) => (
                                <tr key={index} className="hover:bg-gray-50">
                                    {columns.map((column) => (
                                        <td key={column.key} className="px-6 py-4 whitespace-nowrap">
                                            {column.render ? column.render(row[column.key], row) : row[column.key]}
                                        </td>
                                    ))}
                                </tr>
                            ))
                        )}
                    </tbody>
                </table>
            </div>
        );

        const AlertBanner = ({ type, message }) => {
            const typeClasses = {
                success: 'bg-green-50 border-green-200 text-green-800',
                error: 'bg-red-50 border-red-200 text-red-800',
                warning: 'bg-yellow-50 border-yellow-200 text-yellow-800',
                info: 'bg-blue-50 border-blue-200 text-blue-800'
            };

            return (
                <div className={`border rounded-lg p-4 ${typeClasses[type]}`}>
                    <div className="flex items-center">
                        <div className="flex-shrink-0">
                            {type === 'success' && <span>‚úÖ</span>}
                            {type === 'error' && <span>‚ùå</span>}
                            {type === 'warning' && <span>‚ö†Ô∏è</span>}
                            {type === 'info' && <span>‚ÑπÔ∏è</span>}
                        </div>
                        <div className="ml-3">
                            <p className="text-sm font-medium">{message}</p>
                        </div>
                    </div>
                </div>
            );
        };

        // Pages
        const LoginPage = ({ onLogin }) => {
            const [formData, setFormData] = useState({ email: '', password: '', role: 'user' });
            const [loading, setLoading] = useState(false);

            const handleSubmit = (e) => {
                e.preventDefault();
                setLoading(true);
                setTimeout(() => {
                    onLogin(formData.role);
                    setLoading(false);
                }, 1000);
            };

            return (
                <div className="min-h-screen bg-gradient-to-br from-primary-50 to-secondary-50 flex items-center justify-center p-4">
                    <div className="max-w-md w-full bg-white rounded-2xl shadow-xl p-8">
                        <div className="text-center mb-8">
                            <div className="w-20 h-20 bg-gradient-to-r from-primary-600 to-secondary-600 rounded-2xl flex items-center justify-center mx-auto mb-4">
                                <svg className="w-10 h-10 text-white" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                </svg>
                            </div>
                            <h1 className="text-3xl font-bold text-gray-900 mb-2">Welcome to DeKYC</h1>
                            <p className="text-gray-600">Secure decentralized identity verification</p>
                        </div>

                        <form onSubmit={handleSubmit} className="space-y-6">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">Email</label>
                                <input
                                    type="email"
                                    value={formData.email}
                                    onChange={(e) => setFormData({...formData, email: e.target.value})}
                                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                                    placeholder="Enter your email"
                                    required
                                />
                            </div>

                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">Password</label>
                                <input
                                    type="password"
                                    value={formData.password}
                                    onChange={(e) => setFormData({...formData, password: e.target.value})}
                                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                                    placeholder="Enter your password"
                                    required
                                />
                            </div>

                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">Login as</label>
                                <select
                                    value={formData.role}
                                    onChange={(e) => setFormData({...formData, role: e.target.value})}
                                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                                >
                                    <option value="user">User</option>
                                    <option value="issuer">Issuer</option>
                                    <option value="verifier">Verifier</option>
                                    <option value="admin">Admin</option>
                                </select>
                            </div>

                            <ActionButton type="submit" fullWidth loading={loading}>
                                Sign In
                            </ActionButton>
                        </form>
                    </div>
                </div>
            );
        };

        const UserDashboard = () => {
            const [uploadedFiles, setUploadedFiles] = useState([]);

            return (
                <div className="p-6 max-w-7xl mx-auto">
                    <div className="mb-8">
                        <h1 className="text-3xl font-bold text-gray-900 mb-2">KYC Dashboard</h1>
                        <p className="text-gray-600">Manage your identity verification process</p>
                    </div>

                    <div className="mb-8">
                        <AlertBanner type="warning" message="Your KYC verification is in progress. Please wait for review." />
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                        <StatusCard title="ID Document" status="approved" description="Government-issued ID verification" icon="üìÑ" />
                        <StatusCard title="Selfie Verification" status="pending" description="Live photo for identity matching" icon="ü§≥" />
                        <StatusCard title="Address Proof" status="rejected" description="Utility bill or bank statement" icon="üè†" />
                    </div>

                    <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                        <h2 className="text-xl font-semibold text-gray-900 mb-4">Upload Documents</h2>
                        <FileUploadZone
                            onFileUpload={setUploadedFiles}
                            acceptedTypes={['image/*', 'application/pdf']}
                            maxSize={10}
                        />
                    </div>
                </div>
            );
        };

        const IssuerDashboard = () => {
            const [requests] = useState([
                { id: 1, name: 'John Doe', email: 'john@example.com', submittedAt: '2024-01-15', status: 'pending' },
                { id: 2, name: 'Jane Smith', email: 'jane@example.com', submittedAt: '2024-01-14', status: 'pending' }
            ]);

            const columns = [
                { key: 'name', label: 'Name', render: (value, row) => (
                    <div>
                        <p className="font-medium text-gray-900">{value}</p>
                        <p className="text-sm text-gray-500">{row.email}</p>
                    </div>
                )},
                { key: 'submittedAt', label: 'Submitted' },
                { key: 'status', label: 'Status', render: (value) => (
                    <span className="px-2 py-1 text-xs font-medium rounded-full bg-yellow-100 text-yellow-800">
                        {value}
                    </span>
                )},
                { key: 'actions', label: 'Actions', render: () => (
                    <div className="flex space-x-2">
                        <ActionButton variant="success" size="small">Approve</ActionButton>
                        <ActionButton variant="danger" size="small">Reject</ActionButton>
                    </div>
                )}
            ];

            return (
                <div className="p-6 max-w-7xl mx-auto">
                    <div className="mb-8">
                        <h1 className="text-3xl font-bold text-gray-900 mb-2">Issuer Dashboard</h1>
                        <p className="text-gray-600">Review and approve KYC verification requests</p>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
                        <StatusCard title="Pending Reviews" status="pending" description="2 requests awaiting review" icon="‚è≥" count={2} />
                        <StatusCard title="Approved" status="approved" description="15 requests approved" icon="‚úÖ" count={15} />
                        <StatusCard title="Rejected" status="rejected" description="3 requests rejected" icon="‚ùå" count={3} />
                        <StatusCard title="Total Requests" status="neutral" description="20 total requests" icon="üìä" count={20} />
                    </div>

                    <div className="bg-white rounded-xl shadow-sm border border-gray-200">
                        <div className="p-6 border-b border-gray-200">
                            <h2 className="text-xl font-semibold text-gray-900">KYC Requests</h2>
                        </div>
                        <DataTable data={requests} columns={columns} emptyMessage="No KYC requests found" />
                    </div>
                </div>
            );
        };

        const VerifierDashboard = () => {
            const [vcInput, setVcInput] = useState('');
            const [verificationResult, setVerificationResult] = useState(null);
            const [loading, setLoading] = useState(false);

            const handleVerify = (e) => {
                e.preventDefault();
                setLoading(true);
                setTimeout(() => {
                    setVerificationResult({
                        isValid: true,
                        issuer: 'TrustBank KYC',
                        subject: 'John Doe',
                        trustScore: 95
                    });
                    setLoading(false);
                }, 2000);
            };

            return (
                <div className="p-6 max-w-7xl mx-auto">
                    <div className="mb-8">
                        <h1 className="text-3xl font-bold text-gray-900 mb-2">Verifier Dashboard</h1>
                        <p className="text-gray-600">Verify the authenticity of digital credentials</p>
                    </div>

                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                            <h2 className="text-xl font-semibold text-gray-900 mb-4">Verify Credential</h2>
                            <form onSubmit={handleVerify} className="space-y-4">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2">
                                        Verifiable Credential JSON
                                    </label>
                                    <textarea
                                        value={vcInput}
                                        onChange={(e) => setVcInput(e.target.value)}
                                        rows={12}
                                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent font-mono text-sm"
                                        placeholder='{"@context": ["https://www.w3.org/2018/credentials/v1"], ...}'
                                        required
                                    />
                                </div>
                                <ActionButton type="submit" loading={loading}>
                                    Verify Credential
                                </ActionButton>
                            </form>
                        </div>

                        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                            <h2 className="text-xl font-semibold text-gray-900 mb-4">Verification Result</h2>
                            {verificationResult ? (
                                <div className="space-y-4">
                                    <div className="p-4 rounded-lg border bg-green-50 border-green-200">
                                        <div className="flex items-center space-x-3">
                                            <span className="text-2xl">‚úÖ</span>
                                            <div>
                                                <h3 className="font-semibold text-green-900">Credential Valid</h3>
                                                <p className="text-sm text-green-700">This credential has been successfully verified</p>
                                            </div>
                                        </div>
                                    </div>
                                    <div className="bg-gray-50 rounded-lg p-4">
                                        <h4 className="font-medium text-gray-900 mb-2">Details</h4>
                                        <div className="space-y-2 text-sm">
                                            <div className="flex justify-between">
                                                <span className="text-gray-600">Issuer:</span>
                                                <span className="font-medium">{verificationResult.issuer}</span>
                                            </div>
                                            <div className="flex justify-between">
                                                <span className="text-gray-600">Subject:</span>
                                                <span className="font-medium">{verificationResult.subject}</span>
                                            </div>
                                            <div className="flex justify-between">
                                                <span className="text-gray-600">Trust Score:</span>
                                                <span className="font-medium text-green-600">{verificationResult.trustScore}%</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            ) : (
                                <div className="text-center py-12">
                                    <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                                        <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                        </svg>
                                    </div>
                                    <p className="text-gray-500">Submit a credential to see verification results</p>
                                </div>
                            )}
                        </div>
                    </div>
                </div>
            );
        };

        const AdminDashboard = () => {
            const [activeTab, setActiveTab] = useState('issuers');
            const [issuers] = useState([
                { id: 1, name: 'TrustBank KYC', email: 'admin@trustbank.com', status: 'approved', registeredAt: '2024-01-10' },
                { id: 2, name: 'SecureID Solutions', email: 'contact@secureid.com', status: 'pending', registeredAt: '2024-01-14' }
            ]);
            const [auditLogs] = useState([
                { id: 1, timestamp: '2024-01-15 14:30:22', action: 'Credential Issued', user: 'TrustBank KYC', details: 'KYC credential issued' },
                { id: 2, timestamp: '2024-01-15 14:25:15', action: 'Issuer Approved', user: 'Admin', details: 'Approved issuer application' }
            ]);

            const issuerColumns = [
                { key: 'name', label: 'Issuer', render: (value, row) => (
                    <div>
                        <p className="font-medium text-gray-900">{value}</p>
                        <p className="text-sm text-gray-500">{row.email}</p>
                    </div>
                )},
                { key: 'registeredAt', label: 'Registered' },
                { key: 'status', label: 'Status', render: (value) => (
                    <span className={`px-2 py-1 text-xs font-medium rounded-full ${
                        value === 'approved' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
                    }`}>
                        {value}
                    </span>
                )},
                { key: 'actions', label: 'Actions', render: (_, row) => (
                    row.status === 'pending' ? (
                        <div className="flex space-x-2">
                            <ActionButton variant="success" size="small">Approve</ActionButton>
                            <ActionButton variant="danger" size="small">Reject</ActionButton>
                        </div>
                    ) : (
                        <ActionButton variant="secondary" size="small">View</ActionButton>
                    )
                )}
            ];

            const auditColumns = [
                { key: 'timestamp', label: 'Timestamp', render: (value) => (
                    <span className="text-sm font-mono text-gray-600">{value}</span>
                )},
                { key: 'action', label: 'Action' },
                { key: 'user', label: 'User' },
                { key: 'details', label: 'Details' }
            ];

            return (
                <div className="p-6 max-w-7xl mx-auto">
                    <div className="mb-8">
                        <h1 className="text-3xl font-bold text-gray-900 mb-2">Admin Dashboard</h1>
                        <p className="text-gray-600">Manage issuers and monitor system activity</p>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
                        <StatusCard title="Total Issuers" status="neutral" description="2 registered issuers" icon="üè¢" count={2} />
                        <StatusCard title="Approved Issuers" status="approved" description="1 active issuer" icon="‚úÖ" count={1} />
                        <StatusCard title="Pending Approval" status="pending" description="1 awaiting review" icon="‚è≥" count={1} />
                        <StatusCard title="Total Credentials" status="neutral" description="1,250 issued" icon="üìú" count={1250} />
                    </div>

                    <div className="mb-6">
                        <div className="border-b border-gray-200">
                            <nav className="-mb-px flex space-x-8">
                                <button
                                    onClick={() => setActiveTab('issuers')}
                                    className={`py-2 px-1 border-b-2 font-medium text-sm ${
                                        activeTab === 'issuers'
                                            ? 'border-primary-500 text-primary-600'
                                            : 'border-transparent text-gray-500 hover:text-gray-700'
                                    }`}
                                >
                                    Issuer Management
                                </button>
                                <button
                                    onClick={() => setActiveTab('audit')}
                                    className={`py-2 px-1 border-b-2 font-medium text-sm ${
                                        activeTab === 'audit'
                                            ? 'border-primary-500 text-primary-600'
                                            : 'border-transparent text-gray-500 hover:text-gray-700'
                                    }`}
                                >
                                    Audit Logs
                                </button>
                            </nav>
                        </div>
                    </div>

                    <div className="bg-white rounded-xl shadow-sm border border-gray-200">
                        {activeTab === 'issuers' && (
                            <>
                                <div className="p-6 border-b border-gray-200">
                                    <h2 className="text-xl font-semibold text-gray-900">Issuer Applications</h2>
                                </div>
                                <DataTable data={issuers} columns={issuerColumns} emptyMessage="No issuer applications found" />
                            </>
                        )}
                        {activeTab === 'audit' && (
                            <>
                                <div className="p-6 border-b border-gray-200">
                                    <h2 className="text-xl font-semibold text-gray-900">System Audit Log</h2>
                                </div>
                                <DataTable data={auditLogs} columns={auditColumns} emptyMessage="No audit logs found" />
                            </>
                        )}
                    </div>
                </div>
            );
        };

        // Main App
        const App = () => {
            const [isAuthenticated, setIsAuthenticated] = useState(false);
            const [userRole, setUserRole] = useState('user');

            const handleLogin = (role) => {
                setIsAuthenticated(true);
                setUserRole(role);
            };

            const handleLogout = () => {
                setIsAuthenticated(false);
                setUserRole('user');
            };

            if (!isAuthenticated) {
                return <LoginPage onLogin={handleLogin} />;
            }

            const renderDashboard = () => {
                switch (userRole) {
                    case 'user': return <UserDashboard />;
                    case 'issuer': return <IssuerDashboard />;
                    case 'verifier': return <VerifierDashboard />;
                    case 'admin': return <AdminDashboard />;
                    default: return <UserDashboard />;
                }
            };

            return (
                <div className="flex h-screen bg-gray-50">
                    <NavigationSidebar userRole={userRole} />
                    <div className="flex-1 flex flex-col overflow-hidden">
                        <TopHeader onLogout={handleLogout} userRole={userRole} />
                        <main className="flex-1 overflow-x-hidden overflow-y-auto">
                            {renderDashboard()}
                        </main>
                    </div>
                </div>
            );
        };

        ReactDOM.render(<App />, document.getElementById('root'));
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'96f5b5f671011d39',t:'MTc1NTIyOTY0OC4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
